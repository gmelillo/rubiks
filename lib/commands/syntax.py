# (c) Copyright 2017-2018 OLX

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import os
import sys

from .bases import CommandRepositoryBase
from command import Command
from util import mkdir_p
from load_python import PythonFileCollection, PythonBaseFile


class Command_syntax(Command, CommandRepositoryBase):
    """generate syntax highlighting configuration for an editor"""

    def populate_args(self, parser):
        parser.add_argument('-n', '--noop', action='store_true',
                            help="don't actually install anything, only show what would happen")
        parser.add_argument('-v', '--verbose', action='store_true',
                            help="show what installs are happening")
        parser.add_argument('editor', choices=('vim',),
                            help='which editor to generate syntax highlight config for')

    def command(self, args, command):
        if args.noop or args.verbose:
            print('+ {}'.format(command), file=sys.stderr)
        if not args.noop:
            subprocess.Popen(['sh', '-c', command]).communicate()

    def rubiks(self):
        return ('import_python', 'output', 'no_output', 'yaml_dump', 'yaml_load', 'json_dump', 'json_load',
                'stop', 'get_lookup', 'load_object', 'run_command', 'fileinfo', 'cluster_context', 'namespace',
                'current_namespace', 'current_cluster_name', 'current_cluster', 'valid_clusters', 'get_multi_python')

    def mkdir(self, args, *paths):
        if args.noop or args.verbose:
            print('+ mkdir -p ' + ' '.join(paths), file=sys.stderr)
        if not args.noop:
            for p in paths:
                mkdir_p(p)

    def filetext(self, args, filename, text, include_comment=True, comment_char='#'):
        if args.noop or args.verbose:
            print('>>> {}'.format(filename), file=sys.stderr)
            if include_comment:
                print('>   {} Auto-generated by rubiks syntax, edits may be overwritten'.format(comment_char),
                      file=sys.stderr)
                print('>   ', file=sys.stderr)
            for l in text.splitlines():
                print('>   {}'.format(l), file=sys.stderr)
        if not args.noop:
            fn_split = os.path.split(filename)
            tmp = os.path.join(fn_split[0], '.' + fn_split[1] + '.tmp')
            with open(tmp, 'w') as f:
                if include_comment:
                    f.write(comment_char + ' Auto-generated by rubiks syntax, edits may be overwritten\n\n')
                f.write(text)
            os.rename(tmp, filename)

    def run_vim(self, args):
        vimdir = os.path.expanduser('~/.vim')
        filetypes = '\n'.join(map(lambda x: 'au BufRead,BufNewFile *.{}  setfiletype rubiks'.format(x),
                             sorted(PythonFileCollection.get_python_file_type().keys()))) + '\n'
        filetypes += 'au BufRead,BufNewFile .rubiks  setfiletype dosini\n'
        basic_file = """
" quit if another syntax file is loaded
if exists("b:current_syntax")
  finish
endif

runtime! syntax/python.vim
unlet b:current_syntax

{}

let b:current_syntax = "rubiks"
            """.strip() + '\n'

        text = ' '
        count = 0
        for ko in sorted(PythonBaseFile.get_kube_objs().keys()):
            if count % 3 == 0:
                text = text[:-1] + '\nsyn keyword rubiksKubeObj  '
            text += ko + ' '
            count += 1

        text += '\n '
        count = 0
        for ko in sorted(PythonBaseFile.get_kube_vartypes().keys()):
            if count % 3 == 0:
                text = text[:-1] + '\nsyn keyword rubiksVarType  '
            text += ko + ' '
            count += 1

        text += '\n '
        count = 0
        for ko in self.rubiks():
            if count % 3 == 0:
                text = text[:-1] + '\nsyn keyword rubiksFunction  '
            text += ko + ' '
            count += 1

        text = text.strip() + '\n\nhi def link rubiksKubeObj Function\n'
        text += 'hi def link rubiksVarType Function\n'
        text += 'hi def link rubiksFunction Function\n'
        basic_file = basic_file.format(text)

        self.mkdir(args, os.path.join(vimdir, 'syntax'), os.path.join(vimdir, 'ftdetect'))
        self.filetext(args, os.path.join(vimdir, 'syntax', 'rubiks.vim'), basic_file, comment_char='"')
        self.filetext(args, os.path.join(vimdir, 'ftdetect', 'rubiks.vim'), filetypes, comment_char='"')

    def run(self, args):
        self.get_repository(can_fail=True)
        if args.editor == 'vim':
            return self.run_vim(args)
